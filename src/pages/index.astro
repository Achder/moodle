---
import PageLayout from "../layouts/page-layout.astro";
---

<PageLayout>
  <h1
    class="text-8xl sm:text-9xl font-extrabold text-highlight text-shadow-lg text-shadow-highlight font-heading grid gap-4 text-center fade -rotate-6"
  >
    Moodle
  </h1>

  <p
    class="text-8xl sm:text-9xl grid place-content-center text-shadow-highlight tabular-nums text-shadow-lg font-heading text-highlight font-extrabold fade"
    id="rating-number"
  >
    0
  </p>

  <form class="grid gap-8" id="rating-form">
    <fieldset class="grid gap-2">
      <label class="grid gap-1 grid-cols-[minmax(0, 1fr)] text-shadow-md fade">
        Rating
        <input
          class="shadow-lg rounded-full"
          type="range"
          id="rating"
          name="rating"
          min="0"
          max="10"
          step="0.001"
        />
      </label>

      <label class="grid gap-1 text-shadow-md fade">
        Date
        <input
          id="date"
          type="date"
          name="date"
          class="rounded-xs border-4 border-dark py-2 px-4 shadow-lg"
        />
      </label>

      <label class="grid gap-1 text-shadow-md fade">
        Notes (max. 50 characters)
        <input
          id="notes"
          type="text"
          name="notes"
          maxlength="50"
          class="rounded-xs border-4 border-dark py-2 px-4 shadow-lg"
        /></label
      >
    </fieldset>
  </form>

  <button
    id="submit"
    type="submit"
    form="rating-form"
    class="bg-dark text-brand hover:bg-brand hover:text-dark border-4 border-dark cursor-pointer font-extrabold py-2 px-4 rounded-full text-3xl shadow-lg active:shadow-none duration-50 active:scale-99 transition-all fade"
    >Save</button
  >
</PageLayout>

<script>
  import Color from "colorjs.io";
  import { mixN, setThemeColor } from "../utils/color";
  import { fade } from "../utils/animation";
  import { db, RatingSchema, DateSchema } from "../utils/db";
  import { format } from "date-fns";

  const ratingNumber = document.getElementById("rating-number")!;
  const rating = document.getElementById("rating")! as HTMLInputElement;
  const date = document.getElementById("date")! as HTMLInputElement;
  const notes = document.getElementById("notes")! as HTMLInputElement;
  const form = document.getElementById("rating-form")! as HTMLFormElement;
  const submit = document.getElementById("submit")! as HTMLButtonElement;

  function setInput(
    element: HTMLInputElement,
    value: string,
    eventType?: string
  ) {
    element.value = value;
    if (eventType) {
      element.dispatchEvent(new Event(eventType));
    }
  }

  function initRatingSlider() {
    rating.addEventListener("input", () => {
      const value = rating.valueAsNumber;
      const max = Number(rating.max);
      const t = value / max;

      ratingNumber.innerText = `${value.toFixed(1)}`;

      const rootStyle = getComputedStyle(document.documentElement);
      const bad = new Color(rootStyle.getPropertyValue("--color-bad"));
      const mid = new Color(rootStyle.getPropertyValue("--color-mid"));
      const good = new Color(rootStyle.getPropertyValue("--color-good"));
      const bg = mixN([bad, mid, good], t, "oklch", "oklch");

      setThemeColor(bg.toString());
      document.documentElement.style.setProperty(
        "--color-brand",
        bg.toString()
      );
    });
  }

  async function initInputs() {
    try {
      const today = format(new Date(), "yyyy-MM-dd");
      const url = new URL(window.location.href);
      const urlDate = DateSchema.safeParse(url.searchParams.get("date"));
      const currentDate = urlDate.success ? urlDate.data : today;

      setInput(date, currentDate);

      // reset url params
      url.search = "";
      url.searchParams.set("date", currentDate);
      window.history.replaceState({}, "", url.toString());

      const data = await db.ratings.get(currentDate);
      if (!data) {
        setInput(rating, "5", "input");
        setInput(notes, "", "input");
        submit.textContent = "Save";
      } else {
        setInput(rating, data.rating.toString(), "input");
        setInput(notes, data.notes ?? "", "input");
        submit.textContent = "Edit";
      }
    } catch (error) {
      console.error(error);
    }
  }

  async function initForm() {
    form?.addEventListener("submit", async (event) => {
      event.preventDefault();
      const formData = new FormData(form);
      const json = Object.fromEntries(formData.entries());
      const inputs = RatingSchema.safeParse(json);

      if (!inputs.success) {
        console.error(inputs.error);
        return;
      }

      await db.ratings.put(inputs.data);
      await fade(".fade", {
        startOffset: 0,
        endOffset: 50,
        startOpacity: 1,
        endOpacity: 0,
      });

      const rootStyle = getComputedStyle(document.documentElement);
      const brand = rootStyle.getPropertyValue("--color-brand");
      location.href = `/nice?bg=${encodeURIComponent(brand)}`;
    });
  }

  function initDate() {
    date.addEventListener("change", async () => {
      const url = new URL(window.location.href);
      url.searchParams.set("date", date.value);
      window.history.pushState({}, "", url);
      await initInputs();
    });
  }

  document.addEventListener("DOMContentLoaded", async () => {
    fade(".fade", {
      startOffset: -50,
    });

    initRatingSlider();
    initDate();
    await initInputs();
    await initForm();
  });
</script>

<style>
  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    background-color: transparent;
    margin: 0;
    --height: 3rem;
    --outline: 4px;
  }

  input[type="range"]::-webkit-slider-runnable-track {
    -webkit-appearance: none;
    background-color: var(--color-dark);
    border-radius: 100vmax;
    height: var(--height);
    outline: var(--outline) solid var(--color-brand);
    outline-offset: calc(-2 * var(--outline));
  }

  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none; /* Override default look */
    appearance: none;
    background-color: var(--color-brand);
    height: var(--height);
    width: var(--height);
    border-radius: 100vmax;
    outline: var(--outline) solid var(--color-dark);
    outline-offset: calc(-1 * var(--outline));
    position: relative;
    z-index: 2;
  }
</style>
