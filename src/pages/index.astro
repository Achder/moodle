---
import PageLayout from "../layouts/page-layout.astro";
---

<PageLayout>
  <h1
    class="text-8xl sm:text-9xl font-extrabold text-highlight text-shadow-lg text-shadow-highlight font-heading grid gap-4 text-center fadeIn"
  >
    Moodle
  </h1>

  <p
    class="text-8xl sm:text-9xl grid place-content-center text-shadow-highlight tabular-nums text-shadow-lg font-heading text-highlight font-extrabold fadeIn"
    id="rating-number"
  >
    0
  </p>

  <form class="grid gap-8" id="rating-form">
    <fieldset class="grid gap-2">
      <label
        class="grid gap-1 grid-cols-[minmax(0, 1fr)] text-shadow-md fadeIn"
      >
        Rating
        <input
          class="shadow-lg rounded-full"
          type="range"
          id="rating"
          name="rating"
          min="0"
          max="10"
          step="0.001"
        />
      </label>

      <label class="grid gap-1 text-shadow-md fadeIn">
        Date
        <input
          id="date"
          type="date"
          name="date"
          class="rounded-xs border-4 border-dark py-2 px-4 shadow-lg"
        />
      </label>

      <label class="grid gap-1 text-shadow-md fadeIn">
        Notes (optional)
        <input
          type="text"
          name="notes"
          class="rounded-xs border-4 border-dark py-2 px-4 shadow-lg"
        />
      </label>
    </fieldset>

    <button
      type="submit"
      class="bg-dark text-brand hover:bg-brand hover:text-dark border-4 border-dark cursor-pointer font-extrabold py-2 px-4 rounded-full text-3xl shadow-lg active:shadow-none duration-50 active:scale-99 transition-all fadeIn"
      >Save</button
    >
  </form>
</PageLayout>

<script>
  import Color from "colorjs.io";
  import { mixN } from "../utils/color";
  import { fadeIn } from "../utils/animation";
  import { z } from "astro/zod";
  import localforage from "localforage";

  fadeIn(".fadeIn", undefined, {
    startOffset: 50,
    duration: 0.7,
    stagger: 0.075,
  });

  const ratingSchema = z.object({
    rating: z.number(),
    date: z.string().date(),
    notes: z.string().optional(),
  });

  type RatingData = z.infer<typeof ratingSchema>;

  function getFormattedDate(date: Date) {
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, "0");
    const day = date.getDate().toString().padStart(2, "0");

    return `${year}-${month}-${day}`;
  }

  function initRatingSlider() {
    const ratingNumber = document.getElementById("rating-number")!;
    const rating = document.getElementById("rating")! as HTMLInputElement;
    const metaThemeColor = document.querySelector(
      'meta[name="theme-color"]'
    )! as HTMLMetaElement;

    rating.addEventListener("input", () => {
      const value = rating.valueAsNumber;
      const max = Number(rating.max);
      const t = value / max;

      ratingNumber.innerText = `${value.toFixed(1)}`;
      if ("vibrate" in navigator) {
        navigator.vibrate(20);
      }

      const rootStyle = getComputedStyle(document.documentElement);
      const bad = new Color(rootStyle.getPropertyValue("--color-bad"));
      const mid = new Color(rootStyle.getPropertyValue("--color-mid"));
      const good = new Color(rootStyle.getPropertyValue("--color-good"));
      const bg = mixN([bad, mid, good], t, "oklch", "oklch");

      document.documentElement.style.setProperty(
        "--color-brand",
        bg.toString()
      );

      metaThemeColor.content = bg.toString();
    });

    rating.dispatchEvent(new Event("input"));
  }

  async function initDate() {
    const date = document.getElementById("date")! as HTMLInputElement;
    const formattedToday = getFormattedDate(new Date());
    const stored = await localforage.getItem<RatingData>(formattedToday);

    date.value = formattedToday;
  }

  async function initForm() {
    const form = document.getElementById("rating-form")! as HTMLFormElement;
    form?.addEventListener("submit", async () => {
      const formData = new FormData(form);
      const data = ratingSchema.parse(Object.fromEntries(formData.entries()));
      await localforage.setItem(data.date, data);
    });
  }

  initRatingSlider();
  initDate();
  initForm();
</script>

<style>
  .fadeIn {
    opacity: 0;
  }

  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    background-color: transparent;
    margin: 0;
    --height: 3rem;
    --outline: 4px;
  }

  input[type="range"]::-webkit-slider-runnable-track {
    -webkit-appearance: none;
    background-color: var(--color-dark);
    border-radius: 100vmax;
    height: var(--height);
    outline: var(--outline) solid var(--color-brand);
    outline-offset: calc(-2 * var(--outline));
  }

  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none; /* Override default look */
    appearance: none;
    background-color: var(--color-brand);
    height: var(--height);
    width: var(--height);
    border-radius: 100vmax;
    outline: var(--outline) solid var(--color-dark);
    outline-offset: calc(-1 * var(--outline));
    position: relative;
    z-index: 2;
  }
</style>
