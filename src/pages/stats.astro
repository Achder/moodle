---
import PageLayout from "../layouts/page-layout.astro";
import Heading from "../components/heading.astro";
import Chart from "../components/chart.astro";
import Carousell from "../components/carousell.astro";
---

<PageLayout>
  <Heading class="text-center fade">Stats</Heading>
  <Carousell>
    <Chart label="Last week" listenTo="chart:week" />
    <Chart label="Last month" listenTo="chart:month" />
    <Chart label="Last year" listenTo="chart:year" />
  </Carousell>
</PageLayout>

<style>
  .fade {
    opacity: 0;
  }
</style>

<script>
  import { format, subMonths, subWeeks, subYears, addDays } from "date-fns";
  import { db, type ChartEventDetail, type Rating } from "../utils/db";
  import { fade } from "../utils/animation";

  document.addEventListener("DOMContentLoaded", async () => {
    fade(".fade", {
      startOffset: -50,
    });

    function dispatch(
      type: string,
      thisPeriod: Rating[],
      previousPeriod: Rating[]
    ) {
      window.dispatchEvent(
        new CustomEvent<ChartEventDetail>(type, {
          detail: {
            thisPeriod,
            previousPeriod,
          },
        })
      );
    }

    function formatDate(date: Date): string {
      return format(date, "yyyy-MM-dd");
    }

    // helper: given DB results and a start/end date, return one entry per day
    function fillMissingDates(
      ratings: Rating[],
      startFormatted: string,
      endFormatted: string
    ): Rating[] {
      const map = Object.fromEntries(ratings.map((r) => [r.date, r]));
      const results: Rating[] = [];
      let cur = new Date(startFormatted);
      const end = new Date(endFormatted);
      while (cur <= end) {
        const d = formatDate(cur);
        if (map[d]) {
          results.push(map[d]);
        } else {
          // create an "empty" rating for missing dates (rating null)
          results.push({ date: d, rating: null } as Rating);
        }
        cur = addDays(cur, 1);
      }
      return results;
    }

    const today = new Date();
    const todayFormatted = formatDate(today);
    const oneWeekAgo = formatDate(subWeeks(today, 1));
    const twoWeekAgo = formatDate(subWeeks(today, 2));
    const oneMonthAgo = formatDate(subMonths(today, 1));
    const twoMonthAgo = formatDate(subMonths(today, 2));
    const oneYearAgo = formatDate(subYears(today, 1));
    const twoYearAgo = formatDate(subYears(today, 2));

    // fetch raw data, then fill gaps
    const rawLastWeek = await db.ratings
      .where("date")
      .between(oneWeekAgo, todayFormatted, true, true)
      .toArray();
    const rawSecondLastWeek = await db.ratings
      .where("date")
      .between(twoWeekAgo, oneWeekAgo, true, true)
      .toArray();

    const rawLastMonth = await db.ratings
      .where("date")
      .between(oneMonthAgo, todayFormatted, true, true)
      .toArray();
    const rawSecondLastMonth = await db.ratings
      .where("date")
      .between(twoMonthAgo, oneMonthAgo, true, true)
      .toArray();

    const rawLastYear = await db.ratings
      .where("date")
      .between(oneYearAgo, todayFormatted, true, true)
      .toArray();
    const rawSecondLastYear = await db.ratings
      .where("date")
      .between(twoYearAgo, oneYearAgo, true, true)
      .toArray();

    const lastWeek = fillMissingDates(rawLastWeek, oneWeekAgo, todayFormatted);
    const secondLastWeek = fillMissingDates(
      rawSecondLastWeek,
      twoWeekAgo,
      oneWeekAgo
    );

    const lastMonth = fillMissingDates(
      rawLastMonth,
      oneMonthAgo,
      todayFormatted
    );
    const secondLastMonth = fillMissingDates(
      rawSecondLastMonth,
      twoMonthAgo,
      oneMonthAgo
    );

    const lastYear = fillMissingDates(rawLastYear, oneYearAgo, todayFormatted);
    const secondLastYear = fillMissingDates(
      rawSecondLastYear,
      twoYearAgo,
      oneYearAgo
    );

    dispatch("chart:week", lastWeek, secondLastWeek);
    dispatch("chart:month", lastMonth, secondLastMonth);
    dispatch("chart:year", lastYear, secondLastYear);
  });
</script>
