---
import Stat from "./stat.astro";

type Props = astroHTML.JSX.CanvasHTMLAttributes & {
  label: string;
  listenTo: string;
};
const { label, class: classes, listenTo, ...canvasProps } = Astro.props;
---

<label class:list={["grid gap-6 text-shadow-md", classes]}>
  <p class="text-5xl text-center">{label}</p>
  <div class="grid gap-2">
    <div class="grid grid-cols-2 gap-4">
      <Stat label="Average" content="6.5" />
      <Stat label="Trend" content="+20%" />
    </div>
    <canvas
      {...canvasProps}
      class="rounded-sm w-full fade"
      data-listen-to={listenTo}></canvas>
  </div>
</label>

<script>
  import { Chart, registerables } from "chart.js";
  import type { ChartEventDetail } from "../utils/db";
  import { getCssColor } from "../utils/color";
  import { format } from "date-fns";

  Chart.register(...registerables);

  document.addEventListener("DOMContentLoaded", async () => {
    const canvases = [...document.querySelectorAll("canvas")];

    const dark = getCssColor("--color-dark").toString();
    for (const canvas of canvases) {
      const chart = new Chart<"bar", number[]>(canvas, {
        type: "bar",
        data: {
          labels: [],
          datasets: [
            {
              label: "Rating",
              data: [],
              backgroundColor: dark,
            },
          ],
        },
        options: {
          aspectRatio: 1.5 / 1,
          layout: {
            padding: {
              top: 32,
              left: 0,
              right: 0,
              bottom: 12,
            },
          },
          indexAxis: "x",
          animations: {
            // kill horizontal stuff explicitly
            x: {
              duration: 0,
            },
            y: {
              duration: 0,
            },

            // redefine the default numeric group so it DOES NOT include x/width
            numbers: {
              type: "number",
              properties: ["y", "base"], // only grow vertically
              duration: 800,
              easing: "easeOutCubic",
            },
          },
          scales: {
            x: {
              grid: {
                display: false,
                color: dark,
                lineWidth: 1,
                tickWidth: 1,
              },
              ticks: {
                color: dark,
              },
              border: {
                display: false,
              },
            },
            y: {
              min: 0,
              max: 10,
              grid: {
                color: dark,
                lineWidth: 2,
              },
              ticks: {
                stepSize: 1,
                display: false,
              },
              border: {
                display: false,
              },
            },
          },
          plugins: {
            legend: {
              display: false,
            },
            tooltip: {
              animation: {
                duration: 0,
              },
              animations: {
                x: false,
                y: false,
                opacity: { duration: 0 },
              },
            },
          },
        },
      });

      const listenTo = canvas.dataset["listenTo"];
      if (!listenTo) {
        console.error("No valid 'listTo' event name found.");
        return;
      }

      window.addEventListener(listenTo, (event) => {
        const chartEvent = event as CustomEvent<ChartEventDetail>;
        const { ratings } = chartEvent.detail;

        const labels = ratings.map((r) => format(r.date, "MM.dd"));
        const ratingValues = ratings.map((r) => r.rating);

        chart.data.labels = labels;
        chart.data.datasets[0].data = ratingValues;
        chart.update();
      });
    }
  });
</script>
