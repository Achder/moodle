---
import PageLayout from "../layouts/page-layout.astro";
import Input from "../components/input.astro";
import Heading from "../components/heading.astro";
import Rating from "../components/rating.astro";
import Button from "../components/button.astro";
---

<PageLayout>
  <div class="grid gap-4">
    <Heading class="fade">Moodle</Heading>
    <Rating id="rating-number" class="fade">0</Rating>
  </div>
  <Heading id="feedback" class="fade-feedback" />

  <form class="grid gap-4" id="rating-form">
    <fieldset class="grid gap-2">
      <Input
        id="rating"
        type="range"
        name="rating"
        min="0"
        max="10"
        step="0.1"
        class="fade">Rating</Input
      >
      <Input id="date" type="date" name="date" class="fade">Date</Input>
      <Input id="notes" type="text" name="notes" maxlength="50" class="fade"
        >Notes (max. 50 characters)</Input
      >
    </fieldset>
  </form>

  <Button
    id="submit"
    variant="primary"
    class="fade"
    type="submit"
    form="rating-form">Save</Button
  >
</PageLayout>

<script>
  import Color from "colorjs.io";
  import { mixN, setThemeColor } from "../utils/color";
  import { fade } from "../utils/animation";
  import { db, RatingSchema, DateSchema } from "../utils/db";
  import { format } from "date-fns";

  const ratingNumber = document.getElementById("rating-number")!;
  const feedback = document.getElementById("feedback")!;
  const rating = document.getElementById("rating")! as HTMLInputElement;
  const date = document.getElementById("date")! as HTMLInputElement;
  const notes = document.getElementById("notes")! as HTMLInputElement;
  const form = document.getElementById("rating-form")! as HTMLFormElement;
  const submit = document.getElementById("submit")! as HTMLButtonElement;

  function setInput(
    element: HTMLInputElement,
    value: string,
    eventType?: string
  ) {
    element.value = value;
    if (eventType) {
      element.dispatchEvent(new Event(eventType));
    }
  }

  function initRatingSlider() {
    rating.addEventListener("input", () => {
      const value = rating.valueAsNumber;
      const max = Number(rating.max);
      const t = value / max;

      ratingNumber.innerText = `${value.toFixed(1)}`;

      const rootStyle = getComputedStyle(document.documentElement);
      const bad = new Color(rootStyle.getPropertyValue("--color-bad"));
      const mid = new Color(rootStyle.getPropertyValue("--color-mid"));
      const good = new Color(rootStyle.getPropertyValue("--color-good"));
      const bg = mixN([bad, mid, good], t, "oklch", "srgb");

      setThemeColor(bg.toString({ format: "hex" }));
      document.documentElement.style.setProperty(
        "--color-brand",
        bg.toString({ format: "hex" })
      );
    });
  }

  async function initInputs() {
    try {
      const today = format(new Date(), "yyyy-MM-dd");
      const url = new URL(window.location.href);
      const urlDate = DateSchema.safeParse(url.searchParams.get("date"));
      const currentDate = urlDate.success ? urlDate.data : today;

      setInput(date, currentDate);

      // reset url params
      //url.search = "";
      url.searchParams.set("date", currentDate);
      window.history.replaceState({}, "", url.toString());

      const data = await db.ratings.get(currentDate);
      if (!data) {
        setInput(rating, "5", "input");
        setInput(notes, "", "input");
        submit.textContent = "Save";
      } else {
        setInput(rating, data.rating?.toString() ?? "0", "input");
        setInput(notes, data.notes ?? "", "input");
        submit.textContent = "Edit";
      }
    } catch (error) {
      console.error(error);
    }
  }

  function setDisplay(selector: string, display: string) {
    for (const element of [...document.querySelectorAll(selector)]) {
      const htmlElement = element as HTMLElement;
      htmlElement.style.display = display;
    }
  }

  async function animateFormAction() {
    await fade(".fade", {
      startOffset: 0,
      endOffset: 50,
      startOpacity: 1,
      endOpacity: 0,
    });

    setDisplay(".fade", "none");
    setDisplay(".fade-feedback", "block");

    await fade(".fade-feedback", {
      startOffset: -50,
      endOffset: 0,
      startOpacity: 0,
      endOpacity: 1,
    });

    await new Promise((resolve) => setTimeout(resolve, 100));

    await fade(".fade-feedback", {
      startOffset: 0,
      endOffset: 50,
      startOpacity: 1,
      endOpacity: 0,
    });

    setDisplay(".fade-feedback", "none");
    setDisplay(".fade", "grid");

    await fade(".fade", {
      startOffset: -50,
      endOffset: 0,
      startOpacity: 0,
      endOpacity: 1,
    });
  }

  async function initForm() {
    form?.addEventListener("submit", async (event) => {
      event.preventDefault();
      const formData = new FormData(form);
      const json = Object.fromEntries(formData.entries());
      const inputs = RatingSchema.safeParse(json);

      if (!inputs.success) {
        console.error(inputs.error);
        return;
      }

      await db.ratings.put(inputs.data);

      if (!inputs.data.rating) {
        return;
      } else if (inputs.data.rating < 3) {
        feedback.textContent = "Sorry...";
      } else if (inputs.data.rating > 7) {
        feedback.textContent = "Nice!";
      } else {
        feedback.textContent = "Alright";
      }

      await animateFormAction();
    });
  }

  function initDate() {
    date.addEventListener("change", async () => {
      const url = new URL(window.location.href);
      url.searchParams.set("date", date.value);
      window.history.pushState({}, "", url);
      await initInputs();
    });
  }

  document.addEventListener("DOMContentLoaded", async () => {
    fade(".fade", {
      startOffset: -50,
    });

    initRatingSlider();
    initDate();
    await initInputs();
    await initForm();
  });
</script>

<style>
  .fade-feedback {
    opacity: 0;
    display: none;
  }
</style>
