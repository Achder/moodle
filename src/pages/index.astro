---
import "../styles/global.css";
import SocialNav from "../components/SocialNav.astro";
import Logo from "../components/icons/Logo.astro";

const isProduction = import.meta.env.MODE === "production";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>

    {
      isProduction && (
        <>
          <script
            is:inline
            defer
            src="https://analytics.meerpohl.dev/script.js"
            data-website-id="fb5ec53a-fb0a-4130-8845-47ea970c70c7"
          />
        </>
      )
    }
  </head>

  <body class="font-bold text-dark bg-brand overflow-x-hidden">
    <div class="max-w-lg mx-auto p-4 grid gap-8">
      <div class="flex justify-between items-center">
        <a href="https://meerpohl.dev"><Logo/></a>
        <SocialNav class="flex gap-8 justify-end"/>
      </div>

      <h1 class="text-8xl sm:text-9xl font-extrabold text-dark text-shadow-lg">
        Moodle
        <p class="text-4xl text-dark font-extrabold text-shadow-lg">
          Rate your day
        </p>
      </h1>

      <section class="grid gap-8">
        

        <fieldset class="grid gap-2">
          <p
            class="text-9xl grid place-content-center tabular-nums text-shadow-lg"
            id="rating-number"
          >
            0
          </p>

          <label class="grid gap-1 grid-cols-[minmax(0, 1fr)] text-shadow-md">
            Rating
            <input
              class="shadow-lg rounded-full"
              type="range"
              id="rating"
              name="rating"
              min="0"
              max="10"
              step="0.001"
            />
          </label>

          <label class="grid gap-1 text-shadow-md">
            Date
            <input
              id="date"
              type="date"
              name="date"
              class="rounded-xs border-4 border-dark py-2 px-4 shadow-lg"
            />
          </label>

          <label class="grid gap-1 text-shadow-md">
            Notes (optional)
            <input
              type="text"
              name="notes"
              class="rounded-xs border-4 border-dark py-2 px-4 shadow-lg"
            />
          </label>
        </fieldset>
        <button
          type="submit"
          class="bg-dark text-brand hover:bg-brand hover:text-dark border-4 border-dark cursor-pointer font-extrabold py-2 px-4 rounded-full text-3xl shadow-lg active:shadow-none duration-50 active:scale-99 transition-all"
          >Save</button
        >
      </section>
    </div>
  </body>
</html>

<script>
  import Color from "colorjs.io";

  function getFormattedToday() {
    const today = new Date();
    const year = today.getFullYear();
    const month = (today.getMonth() + 1).toString().padStart(2, "0");
    const day = today.getDate().toString().padStart(2, "0");

    return `${year}-${month}-${day}`;
  }

  function init() {
    const ratingNumber = document.getElementById("rating-number")!;
    const rating = document.getElementById("rating")! as HTMLInputElement;
    const date = document.getElementById("date")! as HTMLInputElement;

    rating.addEventListener("input", () => {
      const value = rating.valueAsNumber;
      const max = Number(rating.max);
      const t = value / max;

      ratingNumber.innerText = `${value.toFixed(1)}`;
      if ("vibrate" in navigator) {
        navigator.vibrate(20);
      }

      const rootStyle = getComputedStyle(document.documentElement);
      const bad = new Color(rootStyle.getPropertyValue("--color-bad"));
      const good = new Color(rootStyle.getPropertyValue("--color-good"));
      const bg = bad.mix(good, t, {
        space: "oklch",
      });

      document.documentElement.style.setProperty(
        "--color-brand",
        bg.toString()
      );
    });

    rating.dispatchEvent(new Event("input"));

    date.value = getFormattedToday();
  }

  init();
</script>

<style>
  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    background-color: transparent;
    margin: 0;
    --height: 3rem;
    --outline: 4px;
  }

  input[type="range"]::-webkit-slider-runnable-track {
    -webkit-appearance: none;
    background-color: var(--color-dark);
    border-radius: 100vmax;
    height: var(--height);
    outline: var(--outline) solid var(--color-brand);
    outline-offset: calc(-2 * var(--outline));
  }

  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none; /* Override default look */
    appearance: none;
    background-color: var(--color-brand);
    height: var(--height);
    width: var(--height);
    border-radius: 100vmax;
    outline: var(--outline) solid var(--color-dark);
    outline-offset: calc(-1 * var(--outline));
    position: relative;
    z-index: 2;
  }
</style>
