---
import "../styles/global.css";
import SocialNav from "../components/SocialNav.astro";
import Logo from "../components/icons/Logo.astro";
import StyledLink from "../components/StyledLink.astro";
import { Font } from "astro:assets";
import { pwaInfo } from "virtual:pwa-info";

const isProduction = import.meta.env.MODE === "production";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />

    <link rel="apple-touch-icon" href="/pwa-192x192.png" />
    <link rel="mask-icon" href="/favicon.ico" color="oklch(0.85 0.2 84.36)" />
    <meta name="theme-color" content="oklch(0.85 0.2 84.36)" />
    <meta name="description" content="Moodle - The Mood Tracker" />

    {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}

    <title>Moodle - The Mood Tracker</title>

    {
      isProduction && (
        <>
          <script
            is:inline
            defer
            src="https://analytics.meerpohl.dev/script.js"
            data-website-id="fb5ec53a-fb0a-4130-8845-47ea970c70c7"
          />
        </>
      )
    }

    <Font cssVariable="--font-moodle" preload />
  </head>

  <body class="font-bold text-dark bg-brand overflow-x-hidden">
    <main class="max-w-lg mx-auto p-4 grid gap-8">
      <div class="flex justify-between items-center">
        <a href="/"><Logo /></a>
        <SocialNav class="flex gap-8 justify-end" />
      </div>

      <slot />

      <footer
        class="flex gap-4 py-4 justify-center justify-self-end sm:justify-end text-dark"
      >
        ⓒ Thomas Meerpohl {new Date().getFullYear()}
        <StyledLink href="/imprint">Imprint</StyledLink>
      </footer>
    </main>
  </body>
</html>

<script>
  import { registerSW } from "virtual:pwa-register";

  const updateSW = registerSW({
    onNeedRefresh() {
      updateSW(true);
    },
    onOfflineReady() {
      console.log("App ready for offline use");
    },
  });

  if ("serviceWorker" in navigator) {
    navigator.serviceWorker.addEventListener("controllerchange", () => {
      console.log("[PWA] Controller changed → reloading");
      window.location.reload();
    });
  }

  document.addEventListener("visibilitychange", async () => {
    if (document.visibilityState === "visible") {
      const registration = await navigator.serviceWorker.getRegistration();
      registration?.update();
    }
  });
</script>
